        """
        username = connection.recv(1024).decode()
        print(f'{username} joined the server \n')
        clients.append(connection)
        connection.send(f'{username}, you have the joined the chat \n'.encode())
        broadcast(connection, f'{username} joined the chat')
        """

        """
        handleClient(connection) is the function that handles each client connection. It reads data from the client using 
        connection.recv(1024) (the 1024 specifies the maximum number of bytes to be received at once), converts the received 
        bytes to a string using .decode(), and then sends back the modified data (converted to uppercase) using connection.
        send(modified_message.encode()). If the client sends the message "exit", the function breaks out of the while loop and 
        closes the connection using connection.close().
        """     
        def play_rps():
    while True:
        #Ask the user if the want to play
        userChoice = input("Do you want to play a game of rock, paper or scissors? (y/n)").lower()

        #If the answer is no, quit
        if userChoice == "n":
            print("Thanks for playing!")
            break

        if userChoice == "y":
            userChoice = input("rock, paper, scissors, shoot! (rock/paper/scissors)").lower()
            computerChoice = random.choice(["rock", "paper", "scissors"])
            print(f"you chose {userChoice} and the computer chose {computerChoice}.")

            if userChoice == computerChoice:
                print("It's a tie!")
            elif userChoice == "rock" and computerChoice == "scissors":
                print("You win!")
            elif userChoice == "paper" and computerChoice == "rock":
                print("You win!")
            elif userChoice == "scissors" and computerChoice == "paper":
                print("You win!")
            else:
                print("You lose.")